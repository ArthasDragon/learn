//第三部分   设计原则和编程技巧
//单一职责原则、里氏替换原则、依赖倒置原则、接口隔离原则、合成复用原则、最少知识原则

//第十八章   单一职责原则（SRP）
//一个对象（方法）只做一件事情
/* 
    SRP原则的应用难点就是如何去分离职责
    1.如果随着需求的变化，有两个职责总是同时变化，那就不必分离他们
    2.职责的变化仅当它们确定会发生变化时才具有意义，即使两个职责已经被耦
合在一起，但它们还没有发生改变的征兆，那么也许没有必要主动分离它们

    优点：
        SRP 原则的优点是降低了单个类或者对象的复杂度，按照职责把对象分解成更小的粒度，
这有助于代码的复用，也有利于进行单元测试。当一个职责需要变更的时候，不会影响到其他
的职责
    缺点;
        增加编写代码的复杂度
*/

//第十九章    最少知识原则（LKP、迪米特法则）

//第二十章    开放-封闭原则（OCP）
//将变化封装起来
/* 
    1.放置挂钩
    2.使用回调函数
*/
/* 
    1.挑选出最容易发生变化的地方，然后构造抽象来封闭这些变化
    2.在不可避免发生修改的时候，尽量修改那些相对容易修改的地方
*/

//第二十一章    接口和面向接口编程
//JAVA中可用类向上转型或者接口继承实现
//或者可以用TypeScript进行开发

//第二十二章    代码重构
/* 
    1.提炼函数
    2.合并重复的条件片段
    3.条件分支语句提炼成函数
    4.合理使用循环
    5.提前让函数退出代替嵌套条件分支
    6.尽量减少参数数量
    7.少用复杂三目运算符
    8.分解大型类 
*/
